# .github/workflows/build-libdwarf.yml
name: build-libdwarf

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

env:
  LIBDWARF_VERSION: v0.12.0          # change in one place only

##############################################################################
#  Build – Linux
##############################################################################
jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      cache_miss: ${{ steps.flag.outputs.cache_miss }}

    steps:
      - uses: actions/checkout@v4

      - name: Restore cache (linux)
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: cache/libdwarf
          key: libdwarf-linux-${{ env.LIBDWARF_VERSION }}

      - name: Build libdwarf (linux)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install --no-install-recommends -y \
               build-essential cmake ninja-build pkg-config \
               zlib1g-dev libzstd-dev git

          git clone --depth 1 --branch "$LIBDWARF_VERSION" \
              https://github.com/davea42/libdwarf-code libdwarf-code

          cmake -S libdwarf-code -B build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_SHARED=YES  -DBUILD_NON_SHARED=NO \
                -DCMAKE_INSTALL_PREFIX="$PWD/install"
          cmake --build build --target install --parallel

          # ------------------------------------------------------------------
          # Collect *.so → wrapper-resources + out + cache
          # ------------------------------------------------------------------
          WRAP=jena-wrapper/src/main/resources/linux-x86-64
          mkdir -p "$WRAP" out cache/libdwarf/linux

          cp -P install/lib/libdwarf*.so* "$WRAP/"
          cp -P "$WRAP"/libdwarf*.so*    out/
          cp -P "$WRAP"/libdwarf*.so*    cache/libdwarf/linux/

      - name: Save cache (linux)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: cache/libdwarf
          key: libdwarf-linux-${{ env.LIBDWARF_VERSION }}

      - uses: actions/upload-artifact@v4
        with:
          name: libdwarf-linux
          path: out

      - id: flag
        run: echo "cache_miss=${{ steps.cache.outputs.cache-hit != 'true' }}" >> "$GITHUB_OUTPUT"

##############################################################################
#  Build – Windows
##############################################################################
  build-windows:
    runs-on: windows-latest
    outputs:
      cache_miss: ${{ steps.flag.outputs.cache_miss }}

    steps:
      - uses: actions/checkout@v4

      - name: Restore cache (windows)
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: cache/libdwarf
          key: libdwarf-windows-${{ env.LIBDWARF_VERSION }}

      - name: MSYS2 toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-zlib

      - name: Build libdwarf (windows)
        if: steps.cache.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          set -e
          pacman -Sy --noconfirm git
          git clone --depth 1 --branch "$LIBDWARF_VERSION" \
              https://github.com/davea42/libdwarf-code libdwarf-code

          cmake -S libdwarf-code -B build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_SHARED=YES  -DBUILD_NON_SHARED=NO \
                -DCMAKE_INSTALL_PREFIX="$PWD/install"
          cmake --build build --target install --parallel

          WRAP=jena-wrapper/src/main/resources/win32-x86-64
          mkdir -p "$WRAP" out cache/libdwarf/windows

          cp install/bin/libdwarf*.dll "$WRAP/"
          cp "$WRAP"/libdwarf*.dll      out/
          cp "$WRAP"/libdwarf*.dll      cache/libdwarf/windows/

      - name: Save cache (windows)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: cache/libdwarf
          key: libdwarf-windows-${{ env.LIBDWARF_VERSION }}

      - uses: actions/upload-artifact@v4
        with:
          name: libdwarf-windows
          path: out

      - id: flag
        shell: bash
        run: echo "cache_miss=${{ steps.cache.outputs.cache-hit != 'true' }}" >> "$GITHUB_OUTPUT"

##############################################################################
#  Publish – only when we actually rebuilt something
##############################################################################
  publish:
    needs: [ build-linux, build-windows ]
    if: needs.build-linux.outputs.cache_miss == 'true' || needs.build-windows.outputs.cache_miss == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Sync libdwarf & wrapper folders
        run: |
          set -e
          mkdir -p libdwarf/linux libdwarf/windows
          mkdir -p jna-wrapper/src/main/resources/linux-x86-64
          mkdir -p jna-wrapper/src/main/resources/win32-x86-64

          copy_if_changed() {
              src="$1"; dest="$2"
              [ -e "$src" ] || return 0
              mkdir -p "$(dirname "$dest")"
              if [ -f "$dest" ] && cmp -s "$src" "$dest"; then
                  echo "Unchanged: $dest"
              else
                  cp "$src" "$dest"
                  echo "Updated:   $dest"
              fi
          }

          # -------- Linux .so --------
          find _artifacts/libdwarf-linux -type f -name 'libdwarf*.so*' -print0 | \
            while IFS= read -r -d '' f; do
              base=$(basename "$f")
              copy_if_changed "$f" "libdwarf/linux/$base"
              copy_if_changed "$f" "jna-wrapper/src/main/resources/linux-x86-64/$base"
            done

          # -------- Windows .dll -----
          find _artifacts/libdwarf-windows -type f -name 'libdwarf*.dll' -print0 | \
            while IFS= read -r -d '' f; do
              base=$(basename "$f")
              copy_if_changed "$f" "libdwarf/windows/$base"
              copy_if_changed "$f" "jna-wrapper/src/main/resources/win32-x86-64/$base"
            done

      - name: Commit & push if binaries changed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add libdwarf jna-wrapper/src/main/resources || true
          if git diff --cached --quiet; then
            echo "No binary updates to commit."
            exit 0
          fi
          git commit -m "Update pre-built libdwarf shared libraries to ${LIBDWARF_VERSION}"
          git push origin HEAD
