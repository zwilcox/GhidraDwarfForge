name: build-libdwarf

on:
  push:
    branches: [main, master]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

env:
  LIBDWARF_VERSION: v0.12.0

##############################################################################
#  Build – Linux
##############################################################################
jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      cache_miss: ${{ steps.flag.outputs.cache_miss }}

    steps:
      - uses: actions/checkout@v4

      - name: Restore cache (linux)
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: cache/libdwarf
          key: libdwarf-linux-${{ env.LIBDWARF_VERSION }}

      - name: Copy from cache
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          echo "Cache hit – reusing linux binaries"
          mkdir -p jna-wrapper/src/main/resources/linux-x86-64
          cp -r cache/libdwarf/linux/*.so* \
                jna-wrapper/src/main/resources/linux-x86-64/ 2>/dev/null || true
          mkdir -p out
          cp -r cache/libdwarf/linux/*.so* out/ 2>/dev/null || true

      - name: Build libdwarf (linux)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install --no-install-recommends -y \
            build-essential cmake ninja-build pkg-config \
            zlib1g-dev libzstd-dev
          git clone --depth=1 --branch $LIBDWARF_VERSION \
              https://github.com/davea42/libdwarf-code libdwarf-code
          cmake -S libdwarf-code -B build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_SHARED=YES -DBUILD_NON_SHARED=NO \
                -DCMAKE_INSTALL_PREFIX="$PWD/install"
          cmake --build build --target install --parallel

          mkdir -p jna-wrapper/src/main/resources/linux-x86-64
          mkdir -p out cache/libdwarf/linux

          # move shared libs to wrapper resources
          shopt -s nullglob
          for so in install/lib/libdwarf*.so*; do
            mv "$so" jna-wrapper/src/main/resources/linux-x86-64/
            cp   jna-wrapper/src/main/resources/linux-x86-64/$(basename "$so") \
                 out/
            cp   jna-wrapper/src/main/resources/linux-x86-64/$(basename "$so") \
                 cache/libdwarf/linux/
          done
          shopt -u nullglob

      - name: Save cache (linux)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: cache/libdwarf
          key: libdwarf-linux-${{ env.LIBDWARF_VERSION }}

      - uses: actions/upload-artifact@v4
        with:
          name: libdwarf-linux
          path: out

      - id: flag
        run: echo "cache_miss=${{ steps.cache.outputs.cache-hit != 'true' }}" >> "$GITHUB_OUTPUT"

##############################################################################
#  Build – Windows
##############################################################################
  build-windows:
    runs-on: windows-latest
    outputs:
      cache_miss: ${{ steps.flag.outputs.cache_miss }}

    steps:
      - uses: actions/checkout@v4

      - name: Restore cache (windows)
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: cache/libdwarf
          key: libdwarf-windows-${{ env.LIBDWARF_VERSION }}

      - name: Copy from cache
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          echo "Cache hit – reusing windows binaries"
          mkdir -p jna-wrapper/src/main/resources/win32-x86-64
          cp -r cache/libdwarf/windows/*.dll \
                jna-wrapper/src/main/resources/win32-x86-64/ 2>/dev/null || true
          mkdir -p out
          cp -r cache/libdwarf/windows/*.dll out/ 2>/dev/null || true

      - name: Checkout libdwarf-code ${{ env.LIBDWARF_VERSION }}
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: davea42/libdwarf-code
          ref: ${{ env.LIBDWARF_VERSION }}
          path: libdwarf-code

      - name: Install MSYS2 toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-zlib

      - name: Configure & build (windows)
        if: steps.cache.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          cmake -S libdwarf-code -B build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_SHARED=YES -DBUILD_NON_SHARED=NO \
                -DCMAKE_INSTALL_PREFIX="$PWD/install"
          cmake --build build --target install --parallel

          mkdir -p jna-wrapper/src/main/resources/win32-x86-64
          mkdir -p out cache/libdwarf/windows
          mv install/bin/libdwarf*.dll \
             jna-wrapper/src/main/resources/win32-x86-64/ 2>/dev/null || true
          cp jna-wrapper/src/main/resources/win32-x86-64/*.dll out/          || true
          cp jna-wrapper/src/main/resources/win32-x86-64/*.dll \
             cache/libdwarf/windows/                                        || true

      - name: Save cache (windows)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: cache/libdwarf
          key: libdwarf-windows-${{ env.LIBDWARF_VERSION }}

      - uses: actions/upload-artifact@v4
        with:
          name: libdwarf-windows
          path: out

      - id: flag
        shell: bash
        run: echo "cache_miss=${{ steps.cache.outputs.cache-hit != 'true' }}" >> "$GITHUB_OUTPUT"

##############################################################################
#  Publish if anything actually changed
##############################################################################
  publish:
    needs: [build-linux, build-windows]
    if: needs.build-linux.outputs.cache_miss == 'true' || needs.build-windows.outputs.cache_miss == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Sync libdwarf folder
        run: |
          mkdir -p libdwarf/linux libdwarf/windows
          copy_if_changed() {
            src=$1 dest=$2
            [ -e "$src" ] || return 0
            mkdir -p "$(dirname "$dest")"
            if [ -f "$dest" ] && cmp -s "$src" "$dest"; then
              echo "Unchanged: $dest"
            else
              cp "$src" "$dest"
              echo "Updated: $dest"
            fi
          }
          find _artifacts/libdwarf-linux   -name '*.so*' -print0 2>/dev/null | \
            while IFS= read -r -d '' f; do
              rel=${f#*_artifacts/libdwarf-linux/}
              copy_if_changed "$f" "libdwarf/linux/$rel"
            done
          find _artifacts/libdwarf-windows -name '*.dll' -print0 2>/dev/null | \
            while IFS= read -r -d '' f; do
              rel=${f#*_artifacts/libdwarf-windows/}
              copy_if_changed "$f" "libdwarf/windows/$rel"
            done

      - name: Commit & push if binaries changed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add libdwarf jna-wrapper/src/main/resources
          if git diff --cached --quiet; then
            echo "No binary updates to commit."
            exit 0
          fi
          git commit -m "Update shared libdwarf binaries to ${LIBDWARF_VERSION}"
          git push origin HEAD
