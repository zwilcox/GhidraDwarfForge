name: build-libdwarf

on:
  push:
    branches: [main, master]
  pull_request:
  workflow_dispatch:

# Ensure the workflow can push commits
permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # Checkout this repository (contains the workflow & will hold binaries)
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      # Fetch libdwarf-code sources into a subâ€‘folder
      - name: Checkout libdwarf-code source
        uses: actions/checkout@v4
        with:
          repository: davea42/libdwarf-code
          path: libdwarf-code

      ################################
      # Linux build
      ################################
      - name: Install build deps (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential cmake ninja-build pkg-config \
            zlib1g-dev libzstd-dev

      - name: Configure (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake -S libdwarf-code -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"

      - name: Build & install (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: cmake --build build --target install --parallel

      - name: Collect artifacts (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p out/linux
          cp install/lib/libdwarf* out/linux/ || true
          cp install/bin/dwarf* out/linux/ || true

      ################################
      # Windows build (MSYS2)
      ################################
      - name: Set up MSYS2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-zlib

      - name: Configure (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cmake -S libdwarf-code -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"

      - name: Build & install (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: cmake --build build --target install --parallel

      - name: Collect artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          mkdir -p out/windows
          cp install/bin/libdwarf*.dll out/windows/ || true
          cp install/lib/libdwarf*.a out/windows/ || true
          cp install/bin/dwarf*.exe out/windows/ || true

      ################################
      # Upload job artifacts to transfer between matrix runners
      ################################
      - name: Upload build outputs
        uses: actions/upload-artifact@v4
        with:
          name: libdwarf-${{ matrix.os }}
          path: out

  ################################
  # Publish collected binaries back to repo
  ################################
  publish:
    name: Commit binaries to repo
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true  # so we can push
          fetch-depth: 0             # full history to avoid push issues

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Organize binaries under libdwarf/
        run: |
          mkdir -p libdwarf/linux libdwarf/windows
          cp -r _artifacts/libdwarf-ubuntu-latest/* libdwarf/linux/ || true
          cp -r _artifacts/libdwarf-windows-latest/* libdwarf/windows/ || true

      - name: Show resulting tree (debug)
        run: tree -L 2 libdwarf || true

      - name: Commit & push if changed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Add new/changed binaries
          git add libdwarf
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update prebuilt libdwarf binaries"
            git push origin HEAD
          fi
