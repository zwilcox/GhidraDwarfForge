name: build-libdwarf

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      # ---------------- Cache restore ----------------
      - name: Restore cached binaries
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: cache/libdwarf
          key: libdwarf-${{ runner.os }}-v0.12.0
          restore-keys: |
            libdwarf-${{ runner.os }}-

      # ---------------- If cache hit, skip compilation ----------------
      - name: Copy cached outputs
        if: steps.restore-cache.outputs.cache-hit == 'true'
        run: |
          echo "Cache hit – re‑using prebuilt binaries"
          mkdir -p out
          cp -r cache/libdwarf/* out/

      - name: Checkout libdwarf-code v0.12.0
        if: steps.restore-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: davea42/libdwarf-code
          ref: v0.12.0
          path: libdwarf-code

      ########################################
      # Build (only when cache miss)
      ########################################
      - name: Install build deps (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential cmake ninja-build pkg-config \
            zlib1g-dev libzstd-dev

      - name: Configure (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          cmake -S libdwarf-code -B build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"

      - name: Build & install (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && steps.restore-cache.outputs.cache-hit != 'true'
        run: cmake --build build --target install --parallel

      - name: Collect outputs (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p out
          cp install/lib/libdwarf* out/ || true
          cp install/bin/dwarf* out/ || true

      # -------- Windows steps (cache miss only) --------
      - name: Set up MSYS2 (Windows)
        if: matrix.os == 'windows-latest' && steps.restore-cache.outputs.cache-hit != 'true'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-zlib

      - name: Configure (Windows)
        if: matrix.os == 'windows-latest' && steps.restore-cache.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          cmake -S libdwarf-code -B build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"

      - name: Build & install (Windows)
        if: matrix.os == 'windows-latest' && steps.restore-cache.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: cmake --build build --target install --parallel

      - name: Collect outputs (Windows)
        if: matrix.os == 'windows-latest' && steps.restore-cache.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          mkdir -p out
          cp install/bin/libdwarf*.dll out/ || true
          cp install/lib/libdwarf*.a   out/ || true
          cp install/bin/dwarf*.exe    out/ || true

      # ---------------- Save to cache when we built new binaries ----------------
      - name: Save binaries to cache
        if: steps.restore-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: cache/libdwarf
          key: libdwarf-${{ runner.os }}-v0.12.0

      - name: Copy outputs into cache folder (for future runs)
        if: steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p cache/libdwarf
          cp -r out/* cache/libdwarf/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libdwarf-${{ matrix.os }}
          path: out

  publish:
    name: Commit binaries to repo
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Organize libdwarf folder
        run: |
          mkdir -p libdwarf/linux libdwarf/windows
          cp -r _artifacts/libdwarf-ubuntu-latest/*   libdwarf/linux/   || true
          cp -r _artifacts/libdwarf-windows-latest/*  libdwarf/windows/ || true

      - name: Show tree (debug)
        run: tree -L 2 libdwarf || true

      - name: Commit & push if changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add libdwarf
          if git diff --cached --quiet; then
            echo "No binary updates to commit."
          else
            git commit -m "Update prebuilt libdwarf binaries (cached)"
            git push origin HEAD
          fi
